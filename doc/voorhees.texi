\input texinfo
@c %**start of header
@include inc/voorhees-version.texi
@settitle Voorhees @value{VERSION}
@setchapternewpage off
@c %**end of header

@dircategory Software libraries
@direntry
* Voorhees: (voorhees).           Voorhees cognitive modeling interface library
@end direntry

@copying
This is documentation of Voorhees, version @value{VERSION}.

Copyright @copyright{} 2016-2017 Carnegie Mellon University.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.
@end copying

@titlepage
@title Voorhees
@subtitle Version @value{VERSION}
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@ifnottex
@validatemenus off
@node Top
@top Voorhees
@insertcopying
@end ifnottex

@node Introduction
@chapter Introduction
Voorhees is a small libary of
@url{http://en.wikipedia.org/wiki/Common_Lisp,,Common Lisp}
code for enabling cognitive models written in the
@url{http://act-r.psy.cmu.edu,ACT-R}
cognitive architecture to interact with other software on the same or another machine using
@url{http://json.org,,JSON} over
@url{http://en.wikipedia.org/wiki/Transmission_Control_Protocol,,TCP}.
Voorhees
@itemize
@item
parses JSON values read from the connection to Lisp S-expressions;

@item
formats Lisp S-expressions to JSON values and writes them to the connection;

@item
facilitates the creation of a TCP connection, either as a client or a server, to the cooperating software;

@item
and automates the creation ACT-R chunks from JSON values.
@end itemize

Currently Voorhees has a highly synchronous view of the interation between the ACT-R model
and the other cooperating software: the other software initiates a request, which the
model responds to, possibly returning some data, and then goes back to awaiting further
requests. While this is useful for a number of problemm domains, obviously including those
that stimulated the original creating of Voorhees, there are many for which it is too
constraining. It is expected that in a future release a more flexible design will be
implemented.

@node Obtaining and Installing Voorhees
@chapter Obtaining and Installing Voorhees
Voorhees has been tested with
@itemize
@item
@url{http:ccl.clozure.com,Clozure CL} (CCL), and
@item
@url{http://sbcl.org,Steel Bank Common Lisp} (SBCL) and
@end itemize
@noindent
but should also work in several other Common Lisp implementations. The prime prerequisite
is that the Lisp implementation needs to support the libraries on which Voorhees
depends, including
@url{https://trac.common-lisp.net/bordeaux-threads/wiki/ApiDocumentation,Bordeaux Threads}.

While @url{http://quicklisp.org,Quicklisp} is not required to run Voorhees, it is
recommended. The rest of this section assumes you have Quicklisp installed and
configured in the usual way.

To install Voorhees, download the latest version from
@url{https://bitbucket.org/dfmorrison/voorhees/downloads/?tab=tags,Bitbucket}
and extract the archive.
Then move the resulting directory to one of
@itemize
@item
@file{~/common-lisp/}
@item
@file{~/quicklisp/local-projects/}
@item
@file{~/.local/share/common-lisp/source/}
@item
or some other location in which @url{http://www.cliki.net/asdf,,ASDF} is configured
to look for systems.
@end itemize
@noindent
Alternatively the directory can be left anywhere you like with a
symbolic link to the @file{voorhees.asd} file it contains in one of the preceding
locations.

Once this is done, and Lisp restarted if necessary, Voorhees can be loaded into Lisp by
evaluating @code{(ql:quickload :voorhees)}. In addition to Voorhees itself this will also
load the other libraries on which it depends.

@node The @code{voorhees} Package
@chapter The @code{voorhees} Package

The names of the functions provided by Voorhees are all in the Lisp package
@code{voorhees}, and thus must typically be cited with an explicit package name
@code{voorhees:}, for example @code{voorhees:read-json}. This package is defined with
a nickname, @code{vh}, and so a shorter equivalent is @code{vh:read-json}.

Alternatively the names can be made available without a prefix by calling the
Lisp function @code{use-package}:
@lisp
(use-package :voorhees)
@end lisp

@node Reading and Writing JSON Values
@chapter Reading and Writing JSON Values

@include inc/read-json-summary.texi

@include inc/read-json-function.texi
@include inc/parse-json-function.texi
@include inc/write-json-function.texi
@include inc/json-string-function.texi

@include inc/default-at-keys-variable.texi
@include inc/default-float-elide-trailing-zeros-variable.texi
@include inc/default-float-format-variable.texi
@include inc/default-float-maximum-fixed-variable.texi
@include inc/default-float-minimum-fixed-variable.texi
@include inc/default-float-precision-variable.texi
@include inc/default-float-upper-case-exponent-variable.texi


@node Running Models with Voorhees
@chapter Running Models with Voorhees

The basic interaction with Voorhees is that it creates a TCP socket, either
as the client or the server, with which it connects to the software with which it is
interacting, and then enters a loop. In this loop a JSON value is read from that TCP
connection and passed by it to the cognitive model to act upon. When the model is finished
it can, but is not required, to send a JSON value back. Another JSON value is then
read and so on.

This is done by calling @code{run-model}, passing as its first
argument a function that runs the cognitive model. This function
passed to @code{run-model} should take one argument, the Lisp
representation of the JSON value that has been read from the TCP
connection. It should return one value, the Lisp representation of the
the JSON value to be sent back over the TCP connection, or @code{nil}
if no response is to be sent. How JSON values are represented in Lisp
is described below.

@include inc/run-model-function.texi

@node Creating ACT-R Chunks
@chapter Creating ACT-R Chunks

@include inc/chunkify-function.texi

@bye
